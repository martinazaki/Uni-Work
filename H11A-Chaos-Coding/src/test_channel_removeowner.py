# This was wirtten by Maria Cuyutupa Garcia (z5223865)
"""
 COMP1531 T1 Project (Backend) 
 This file contains tests for channel_removeowner function
"""
#pylint: disable=trailing-whitespace
#pylint: disable=missing-function-docstring 
#pylint: disable=unused-variable
#pylint: disable=invalid-name

# Python libraries
from random import randint
import pytest

# Project files
from channels import channels_create
from channel import channel_removeowner, channel_addowner, channel_invite
from auth import auth_register
from error import InputError
from workspace_admin import workspace_reset 

# Tests

# These tests raise an error when user with user id u_id is not an owner of the channel
def test_user_not_owner1():
    # This resets the database
    workspace_reset()

    # Users 
    user1 = auth_register("z522maria@ad.unsw.edu.au", "Kebh@$njsiJ137bj", "Maria", "Cuyutupa") 
    user2 = auth_register("smithjohnson@gmail.com", "LSweb7468yet", "Smith", "Johnson") 
    user3 = auth_register("wilsonmiller@gmail.com", "bvwir367", "Wilson", "Miller") 

    # Creates the channel and adds users
    channel_id = channels_create(user3["token"], "new_channel", True)
    channel_invite(user3["token"], channel_id["channel_id"], user2["u_id"])
    channel_invite(user3["token"], channel_id["channel_id"], user1["u_id"])

    # Raises an error because user is not an owner
    with pytest.raises(InputError) as e:
        channel_removeowner(user3["token"], channel_id["channel_id"], user2["u_id"])

def test_user_not_owner2():
    # This resets the database
    workspace_reset()

    # Users 
    user1 = auth_register("z522maria@ad.unsw.edu.au", "Kebh@$njsiJ137bj", "Maria", "Cuyutupa") 
    user2 = auth_register("smithjohnson@gmail.com", "LSweb7468yet", "Smith", "Johnson") 

    # Creates the channel and adds users
    channel_id = channels_create(user1["token"], "random channel", False)
    channel_invite(user1["token"], channel_id["channel_id"], user2["u_id"])

    # Raises an error because user is not an owner
    with pytest.raises(InputError) as e:
        channel_removeowner(user1["token"], channel_id["channel_id"], user2["u_id"])


# These tests raise an error if the Channel ID is not a valid channel. 
"""
Assumption:
All the numbers generated by random_int do not match with any Channel IDs since the range of this 
is from 10000 to 100000.
"""
def test_channel_id_error1():
    workspace_reset() # This resets the database
    random_int = randint(10000, 100000) # Generates numbers that do not match with any Channel ID

    # Users 
    user1 = auth_register("z522maria@ad.unsw.edu.au", "Kebh@$njsiJ137bj", "Maria", "Cuyutupa") 
    user2 = auth_register("smithjohnson@gmail.com", "LSweb7468yet", "Smith", "Johnson")
    
    # Creates the channel and add members
    channel_id = channels_create(user1["token"], "random_name", True)
    channel_invite(user1["token"], channel_id["channel_id"], user2["u_id"])
    channel_addowner(user1["token"], channel_id["channel_id"], user2["u_id"])

    # Raises an error because id is not correct
    with pytest.raises(InputError) as e:
        assert channel_id["channel_id"] != random_int
        channel_removeowner(user1["token"], random_int, user2["u_id"])

def test_channel_id_error2():
    workspace_reset() # This resets the database
    random_int = randint(10000, 100000) # Generates numbers that do not match with any Channel ID
    
    # Users
    user2 = auth_register("smithjohnson@gmail.com", "LSweb7468yet", "Smith", "Johnson")
    user5 = auth_register("taylorrob3103@hotmail.com", "478hds!@#", "Taylor", "Robinson") 

    # Creates the channel and add member and owner
    channel_id = channels_create(user2["token"], "new_channel", False)
    channel_invite(user2["token"], channel_id["channel_id"], user5["u_id"])
    channel_addowner(user2["token"], channel_id["channel_id"], user5["u_id"])

    # Raises an error because id is not correct
    with pytest.raises(InputError) as e:
        assert channel_id["channel_id"] != random_int
        channel_removeowner(user2["token"], random_int, user5["u_id"])

def test_channel_id_error3():
    workspace_reset() # This resets the database
    random_int = randint(10000, 100000) # Generates numbers that do not match with any Channel ID
    
    # Users
    user4 = auth_register("z522maria@ad.unsw.edu.au", "Kebh@$njsiJ137bj", "Maria", "Cuyutupa") 
    user1 = auth_register("margaretrodriguez@outlook.com", "6473286", "Margaret", "Rodriguez") 

    # Creates the channel and add member and owner
    channel_id = channels_create(user4["token"], "new_general", False)
    channel_invite(user4["token"], channel_id["channel_id"], user1["u_id"])
    channel_addowner(user4["token"], channel_id["channel_id"], user1["u_id"])

    # Raises an error because id is not correct
    with pytest.raises(InputError) as e:
        assert channel_id["channel_id"] != random_int
        channel_removeowner(user4["token"], random_int, user1["u_id"])

"""
AccessError
These tests raise an error when the authorised user is not an owner of the slackr, or an owner 
of this channel.
"""
# Not an member of the channel
def test_user_not_member1():
    # This resets the database
    workspace_reset()

    # Users 
    user2 = auth_register("z522maria@ad.unsw.edu.au", "Kebh@$njsiJ137bj", "Maria", "Cuyutupa") 
    user1 = auth_register("smithjohnson@gmail.com", "LSweb7468yet", "Smith", "Johnson") 

    # Create the channel 
    channel_id = channels_create(user2["token"], "The noobs", False)

    # Raises an error because user is not a member
    with pytest.raises(InputError) as e:
        channel_removeowner(user2["token"], channel_id["channel_id"], user1["u_id"])

def test_user_not_member2():
    # This resets the database
    workspace_reset()

    # Users
    user1 = auth_register("z522maria@ad.unsw.edu.au", "Kebh@$njsiJ137bj", "Maria", "Cuyutupa") 
    user3 = auth_register("wilsonmiller@gmail.com", "bvwir367", "Wilson", "Miller") 
    user5 = auth_register("taylorrob3103@hotmail.com", "478hds!@#", "Taylor", "Robinson")

    # Create the channel and add members
    channel_id = channels_create(user1["token"], "I love Python", True)
    channel_invite(user1["token"], channel_id["channel_id"], user5["u_id"])

    # Raises an error because user is not a member
    with pytest.raises(InputError) as e:
        channel_removeowner(user1["token"], channel_id["channel_id"], user3["u_id"])

# Test if removes the owner of the channel or slackr
# Owner of channel
def test_user_owner():
    # This resets the database
    workspace_reset()

    # Users 
    user2 = auth_register("smithjohnson@gmail.com", "LSweb7468yet", "Smith", "Johnson")
    user5 = auth_register("taylorrob3103@hotmail.com", "478hds!@#", "Taylor", "Robinson")     

    # Creates the channel, invites and add owner.
    channel_id = channels_create(user2["token"], "i love cats", False)
    channel_invite(user2["token"], channel_id["channel_id"], user5["u_id"])
    channel_addowner(user2["token"], channel_id["channel_id"], user5["u_id"])

    # Removes the owner
    channel_removeowner(user2["token"], channel_id["channel_id"], user5["u_id"])

# Owner of slackr
def test_user_not_slackr4():
    # This resets the database
    workspace_reset()

    # Users
    user1 = auth_register("z522maria@ad.unsw.edu.au", "Kebh@$njsiJ137bj", "Maria", "Cuyutupa") 
    user2 = auth_register("smithjohnson@gmail.com", "LSweb7468yet", "Smith", "Johnson") 
    user3 = auth_register("wilsonmiller@gmail.com", "bvwir367", "Wilson", "Miller") 

    # Creates the channel, invites and add owner
    channel_id = channels_create(user2["token"], "general 2", True)
    channel_invite(user2["token"], channel_id["channel_id"], user1["u_id"])
    channel_invite(user2["token"], channel_id["channel_id"], user3["u_id"])

    # Removes the owner
    channel_removeowner(user1["token"], channel_id["channel_id"], user2["u_id"])
