**Assumptions for Permissions**
=======
* If the user is only a channel owner and not a global owner, they cannot edit other channel owner's permissions

**Assumptions for Authentication Tests**
=======

**auth_login**
-------------
* Tests assume auth_register function is working.
* Blank fields are invalid and raise exceptions.
* The email "nico.hulkenburg@gmail.com" does not belong to a user.

 **auth_register**
-------------
* First or last names conisting of 1-50 white space characters is invalid.

**auth_logout**
-------------
* The token "InvalidToken" is an invalid token.


**Assumptions for Channel Tests**
=======

**channel_invite**
-------------
* After calling channels_create, channel_join needs to be called for the creator of the channel to join/be made a member of the channel. 
* Assume that nothing happens (the invite isn't sent/doesn't go through) and an input error is raised if a user who is already in a channel is invited into that same channel.
* Assume that when auth_register is called, and a user is registered, then they are automatically logged in. 

**channel_details**
----------------

**channel_messages**
------------------
* We don't know how many messages are in the channel, so currently just using a large number to test. 

**channel_leave**
--------------

**channel_join**
-------------
**channel_addowner**
------------------
* These tests assume that channels_create, channel_invite and auth_register functions work.
* Assume that the User created is already login.
* Assume that the User that creates that channel automatically becomes a owner.
* To add an owner, assume the User has to be invited to be part of the channelfirst.
* Assume that all the numbers generated by random_int do not match with any Channel IDs since the range of this 
is from 10000 to 100000.

**channel_removeowner**
--------------
* These tests assume that channels_create, channel_invite, channel_addowner and auth_register functions work
* Assume that the User created is already login.
* Assume that the User that creates that channel automatically becomes a owner.
* To add an owner, assume the User has to be invited to be part of the channelfirst.
* Assume that all the numbers generated by random_int do not match with any Channel IDs since the range of this 
is from 10000 to 100000.

**channels_create**
-------------
* These tests assume that auth_register function works.

**channels_list**
------------------
* These tests assume that auth_register and channels_create functions work.

**channels_listall**
------------------
* These tests assume that auth_register and channels_create functions work.
* Assume that all type of channels are displayed, either public or private.

**Assumptions for Messages Tests**
=======

**message_send**
-------------
* Tests assume auth_register, auth_login, channels_create and channel_join functions are working.

**message_remove**
-------------
* Tests assume auth_register, auth_login, channels_create, channel_join and message_send functions are working.
* The user ID "InvalidID" is an invalid ID.

**message_edit**
------------
* Tests assume auth_register, auth_login, channels_create, channel_join and message_send functions are working.


**Assumptions for User Tests**
=======

**user_profile**
--------------
* Assuming auth_register function is working

**user_profile_setname**
--------------
* Assuming auth_register function is working

**user_profile_setemail**
--------------
* Assuming auth_register function is working

**user_profile_sethandle**
--------------
* Assuming auth_register function is working

**user_all**
--------------


**Assumptions for Search Tests**
=======

**search**
--------
* Assuming all message and channel functions are working
